
Statement      -> ClassStmt  | BlockStmt | LetStmt   | RepeatStmt | 
                  RequireStmt | IfStmt   | MacroStmt | PrintStmt  | 
                  ReturnStmt | ComparisonExpr
                 
ClassStmt      -> class IDENTIFIER DefineStmt

BlockStmt      -> do Statement* (else Statement*)? end

DefineStmt     -> define MemberStmt* end

MemberStmt     -> member IDENTIFIER BlockStmt |
                  member IDENTIFIER (= ComparisonExpr)?

LetStmt        -> let IDENTIFIER (= ComparisonExpr)?

RepeatStmt     -> repeat ComparisonExpr BlockStmt |
                  repeat ComparisonExpr (:|to) ComparisonExpr BlockStmt
                  
RequireStmt    -> require PrimaryValue

IfStmt         -> if ComparisonExpr BlockStmt

MacroStmt      -> macro IDENTIFIER (with CommaStmt)? BlockStmt

CommaStmt      -> IDENTIFIER (, IDENTIFIER)*

PrintStmt      -> print ComparisonExpr

ReturnStmt     -> return ComparisonExpr

ComparisonExpr -> ConditionExpr ((and|or) ConditionExpr)* | NewExpr

NewExpr        -> new IDENTIFIER

ConditionExpr  -> AdditionExpr  ((==|!=|<|<=|>|>=) AdditionExpr)*

AdditionExpr   -> MultiplyExpr  ((+|-) MultiplyExpr)*

MultiplyExpr   -> UnaryExpr     ((*|/) UnaryExpr)*

UnaryExpr      -> (!|-)? UnaryExpr | DottedExpr

DottedExpr     -> Grouping(.Grouping)*

Grouping       -> ( ComparisonExpr ) | PrimaryExpr

PrimaryExpr    -> true | false | NUMBER | IDENTIFIER (with ArgExpr)? | STRING

ArgExpr        -> IDENTIFIER = PrimaryExpr (, IDENTIFIER = PrimaryExpr)*
